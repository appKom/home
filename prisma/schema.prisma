generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Article {
  id               Int      @id @default(autoincrement())
  slug             String   @unique
  title            String
  description      String
  imageUri         String
  imageDescription String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  memberId         Int
  author           Member   @relation(fields: [memberId], references: [id])
}

model Member {
  id            Int             @id @default(autoincrement())
  name          String
  href          String          @unique
  imageUri      String?
  isCurrent     Boolean         @default(true)
  about         String?
  quote         String?
  email         String?         @unique
  phone         String?
  github        String?
  linkedin      String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Article       Article[]
  ProjectMember ProjectMember[]
  rolesByPeriod RoleByPeriod[]
}

model RoleByPeriod {
  id       Int      @id @default(autoincrement())
  period   String
  role     RoleEnum
  memberId Int
  member   Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([memberId, period])
}

model ProjectMember {
  id        Int          @id @default(autoincrement())
  projectId Int
  memberId  Int
  Role      ProjectRoles
  Member    Member       @relation(fields: [memberId], references: [id])
  Project   Project      @relation(fields: [projectId], references: [id])
}

model Project {
  id               Int             @id @default(autoincrement())
  title            String
  shortDescription String
  description      String
  github           String
  imageUri         String
  techStack        String
  href             String          @unique
  link             String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  projectMembers   ProjectMember[]
}

enum ProjectRoles {
  Prosjektleder
  Bidragsyter
}

enum RoleEnum {
  Leder
  Nestleder
  Okonomiansvarlig @map("Ã˜konomiansvarlig")
  Medlem
}
